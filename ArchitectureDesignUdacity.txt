30:


some stuff TBAdded

What is the key design question with which any implementation of TestBrowser must deal?


31:

Software Design: The Process of buidin a program while satisfying a problem's functional requirements and not violating its non-functional requirements

Two Parts:
Architectural Design
Detail Design

Architectural design:
The process of Identifying and assigning the responsibility for aspects of beahavior to various modules or components of Software

Detail Design:
The Process of specifying the behavior of each of the system components that you have identified during Architectural design
particularly w.r.t their Datastructures and Algorithms

The Primary activity during detailed design is to select logical representations of data objects identified during the requirements definition and specification phase. The selection process may involve algorithmic analysis of alternative structures in order to determine the most efficient design or may simply involve the use of a set of modules that provide the operations upon some representation of an object

Pseudo Code; Program Design Language(PDL):
Keywords, free syntax of natural language, data declaration, sub-program definition and calling

Structured Programming:
Sequence, Condition, repetition, chunking

Flow charts, Call Graphs:
Directed Graphs: node is computational unit, arc is flow of control

Decision Tables:
Rules, Conditions, actions

33: Approaches to Software Design:
More structured: OO Design
Some for Real Time systems
Some as only part of an application, ex. User Interface

Design method, Design representation, Design validation

Method: A method is a systematic sequence of steps that a design team uses to solve a problem
Design method acts as a discipline for designers and implementers to think in certian ways
Ex: OO Design, Structured Design, Role based design

34: Issues with Design

Are you going to do things top down? or Bottom up or Inside out?
Are you going to begin by thinking of procedures nad functions or in terms of nouns and objects like OO design.

Conceptual Integrity vs Cooperative development

Long-term maintainability vs Short term schedule

What tools are you going to use to support the above decisions

35: Design Validation:
Review, Walkthrough, Inspection by team or tools based checking

Issues withh Design Validation:
Independence of validators
Dependence on design method
On-going vs after the fact


36: Other Design Issues:

Architectural vs Detail Design
Functional behavior vs non-functional constraints
Specification/what vs Design/how
Application Specificity

37: Design Documentation:
For large designs, the scale and complexity beg to have a design documentation
If maintenance is going to be done by different people, it will be of great help
Different kinds of methods, different kinds of applications require differnt kinds of documentation
Formal Multi-volume, to scribble notes to presentations

38: Traditional Design Documentation
Subcomponents:
-Processes/activities
-Data/data flows
Control FLow:
-Control regime
Performance
Resources

For more detailed documentation, use IEEE 1016

39: Leonardo Objects
Stakeholders: views/interests; work procedures
Issue bases: Issues, alternatives, analyses, resolutions(commitments, decisions), rationale, impacts, conflicts
Temporal relations: histories, schedules, transformations, versions(revisions, releases, variants)
Constraints: Internal, external,(requirements, specifications)
Aggregates: Configurations, packages, components

40: Design Rationale:
Design decisions are explicit choices of how to trade off two non-functional aspects of a design, such as speed versus size

51: Class Models
Class Model Diagram:
Most Popular
Also called static model
Structural relationships
Has Classes and relationships

52: UML Classes:
Have 3 compartments
Top compartmnet-> Name of Class
Middle compartment-> Attributes
Third/last compartment has Methods or Operations that class provides

53: UML Relationships
Dependency: X uses Y, Dashed line, directed line
Associations: X affects Y Solid undirected line(X contains an instance of Y for example))
Generalisation: X is a kind of Y; Solid line with large, open arroeehead(X is a Kind of Y))

54: Example Class Diagram

55: Object Diagram:
Same or similar to Class Model diagram
The Label compartment at the top of the boxes has an underlined text line
Label(Text line) => Instance <colon> Class name
Used to convey the specific use of the classes involved in a class model diagram
Attribute fields have attribute values

56: Composite Structure Diagram
A structural diagram which shows the internal structure of a class
Left side of interior class(horizontal lines coming out) are interfaces
Provides interface has circle at the end of line
Requires interface has semi circle at the end of line

57: Component diagram
=> Static Implementation view:
A physical, replacable part of a system that provides implementation and conforms to and provides the realization of a set of interfaces - UML Reference Manual
Used to Model code entities
Used to convey architecture

58: Example Component Diagram
Rectangle with two sub rectangles on the sides, indicate components
Dashed lines indicate where components plug into other components

59: Deployment Diagram
In a complex system, systems may run on different processing units and we'd like to convey the configuration of the run time processing units and their component instances in a way that sees how they can interact.
A Node in teh diagram will correspond to a computational device and Arcs indicate some kind of communication

Deployment Diagram => "Configuration of run-time processing nodes and the component instances and objects that live on them" - UML Reference Manual

60: Example Component Diagram
